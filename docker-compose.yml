networks:
  pipeline_network:
    name: pipeline_network
    driver: bridge
  prefect-server:
    name: prefect-server

services:
  brt_postgres:
    image: postgres:16
    container_name: brt_postgres
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DATABASE}
    ports:
      - "${DB_EXTERNAL_PORT}:5432"
    volumes:
      - ./dev/brt_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_DATABASE}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - pipeline_network
    profiles: [pipeline]

  apollo:
    command: bash -c "./post-start.sh && npm run serve"
    depends_on:
      graphql:
        condition: service_healthy
      hasura:
        condition: service_healthy
    environment:
      GRAPHQL_SERVICE_HOST: http://graphql
      GRAPHQL_SERVICE_PORT: 4201
      HASURA_API_URL: http://hasura:3000/v1alpha1/graphql
      PREFECT_API_HEALTH_URL: http://graphql:4201/health
      PREFECT_API_URL: http://graphql:4201/graphql/
      PREFECT_SERVER__TELEMETRY__ENABLED: "true"
    healthcheck:
      interval: 10s
      retries: 60
      start_period: 1s
      test: curl --fail --silent "http://apollo:4200/.well-known/apollo/server-health"
        &> /dev/null || exit 1
      timeout: 2s
    image: prefecthq/apollo:core-0.15.9
    networks:
      - prefect-server
    ports:
    - 127.0.0.1:4200:4200/tcp
    restart: always
    profiles: [prefect]

  graphql:
    command: bash -c "prefect-server database upgrade -y && python src/prefect_server/services/graphql/server.py"
    depends_on:
      hasura:
        condition: service_healthy
    environment:
      PREFECT_CORE_VERSION: 0.15.9
      PREFECT_SERVER_DB_CMD: prefect-server database upgrade -y
      PREFECT_SERVER__DATABASE__CONNECTION_URL: postgresql://prefect:test-password@postgres:5432/prefect_server
      PREFECT_SERVER__HASURA__ADMIN_SECRET: hasura-secret-admin-secret
      PREFECT_SERVER__HASURA__HOST: hasura
    healthcheck:
      interval: 20s
      retries: 60
      start_period: 1s
      test: curl --fail --silent "http://graphql:4201/health" &> /dev/null || exit
        1
      timeout: 2s
    image: prefecthq/server:core-0.15.9
    networks:
      - prefect-server
    ports:
    - 127.0.0.1:4201:4201/tcp
    restart: always
    profiles: [prefect]

  hasura:
    command: graphql-engine serve
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgresql://prefect:test-password@postgres:5432/prefect_server
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_LOG_LEVEL: warn
      HASURA_GRAPHQL_QUERY_PLAN_CACHE_SIZE: 100
      HASURA_GRAPHQL_SERVER_PORT: '3000'
    healthcheck:
      interval: 10s
      retries: 60
      start_period: 1s
      test: wget -O - http://hasura:$${HASURA_GRAPHQL_SERVER_PORT}/healthz &>/dev/null || exit 1
      timeout: 2s
    image: hasura/graphql-engine:v1.3.3
    networks:
      - prefect-server
    ports:
    - 127.0.0.1:3000:3000/tcp
    restart: always
    profiles: [prefect]
    
  postgres:
    command:
    - postgres
    - -c
    - max_connections=150
    environment:
      POSTGRES_DB: prefect_server
      POSTGRES_PASSWORD: test-password
      POSTGRES_USER: prefect
    healthcheck:
      test: pg_isready -q -d $${POSTGRES_DB} -U $${POSTGRES_USER} || exit 1
      interval: 10s
      retries: 60
      start_period: 2s
      timeout: 2s
    image: postgres:11
    networks:
      - prefect-server
    ports:
    - 127.0.0.1:${PREFECT_DB_PORT}:5432/tcp
    restart: always
    volumes:
      - ./dev/prefect_postgres_data:/var/lib/postgresql/data
    profiles: [prefect]

  towel:
    command: python src/prefect_server/services/towel/__main__.py
    depends_on:
      graphql:
        condition: service_healthy
    environment:
      PREFECT_SERVER__HASURA__ADMIN_SECRET: hasura-secret-admin-secret
      PREFECT_SERVER__HASURA__HOST: hasura
    image: prefecthq/server:core-0.15.9
    networks:
      - prefect-server
    restart: always
    profiles: [prefect]

  ui:
    command: /intercept.sh
    depends_on:
      apollo:
        condition: service_healthy
    environment:
      PREFECT_SERVER__APOLLO_URL: http://localhost:4200/graphql
    healthcheck:
      interval: 30s
      retries: 3
      test: curl --fail --silent --head "http://ui:8080/" &> /dev/null || exit 1
      timeout: 5s
    image: prefecthq/ui:core-0.15.9
    networks:
      - prefect-server
    ports:
    - 127.0.0.1:8080:8080/tcp
    restart: always
    profiles: [prefect]

  prefect-agent:
    build: .
    entrypoint: ["/bin/sh", "/app/entrypoint.sh"]
    depends_on:
      apollo:
        condition: service_healthy
    env_file:
      - .env
    environment:
      - PREFECT__SERVER__ENDPOINT=http://apollo:4200
    networks:
      - prefect-server
      - pipeline_network
    volumes:
      - ./:/app
      - ./dev/prefect_data:/root/.prefect
    profiles: [agent]

### Prefect CLI
  flow-register:
    build: .
    depends_on:
      apollo:
        condition: service_healthy
      prefect-agent:
        condition: service_started
    working_dir: /app
    volumes:
      - "./:/app"
    environment:
      - PREFECT__SERVER__ENDPOINT=http://apollo:4200
      - PYTHONPATH=/app
    profiles: [pipeline]
    networks:
      - prefect-server
      - pipeline_network
    command: bash -c "prefect backend server && prefect create project staging --skip-if-exists && prefect register --project staging -m pipelines.flows"

